package CSRubik;

/* Date: Wednesday, June 19, 2013
 * Written by: Henry Han and Quinn Turner
 * Description: This is the centerpiece of the graphics portion of the application. It 
 * is the frame that the cube is drawn on, and features the color-selection and where the
 * move advance/regress takes place
 */

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.KeyStroke;

public class FrameForm extends javax.swing.JFrame {

    CubeLogic logic;

    public FrameForm() {
        super("CSRubiks");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // this method is basically a macro of the steps needed to print messages to the textbox
    void text(String message) {
        textArea.insert(message + "\n", WIDTH);
    }
    // a method that clears the textbox

    void clearText() {
        textArea.setText(null);
    }

    // this is called to update the current move queue
    void updateMoves() {
        clearText();
        text("Input Moves: " + logic.moves);
    }

    // scrambles and displays cube. displays on the text. 
    void scrambleCube() {
        clearText();
        logic.reset();
        logic.scrambleCube();
        text("Scramble: " + logic.scrambleString);
        CubeJPanel.repaint();
    }

    // generates a solve, outputs of the cube is solvable or not, adds the solve moves to the queue
    void solveCube() {
        clearText();
        logic.readCube();
        if (logic.checkLegal()) {
            if (logic.setMovesToSolve()) {
                text("Solve: " + logic.moves);
                text("Solved in " + logic.numMoves + " moves.");
            } else {
                text("Solved in " + logic.numMoves + " moves.");
                text("Solve: " + logic.moves);
                text("Best try:");
                text("Unsolveable");

            }
        } else {
            text("Cube is Invalid");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        scrambleButton = new javax.swing.JButton();
        solveButton = new javax.swing.JButton();
        logic = new CubeLogic();
        CubeLogic.setCurrentInstance(logic);
        jPanel1 = new javax.swing.JPanel();
        whiteButton = new javax.swing.JButton();
        orangeButton = new javax.swing.JButton();
        blueButton = new javax.swing.JButton();
        redButton = new javax.swing.JButton();
        greenButton = new javax.swing.JButton();
        yellowButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        CubeJPanel = new CubeJPanel();
        regressButton = new javax.swing.JButton();
        advanceButton = new javax.swing.JButton();
        moveButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        play = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newCubeMenuItem = new javax.swing.JMenuItem();
        openCubeMenuItem = new javax.swing.JMenuItem();
        saveCubeMenuItem = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        instructionsMenuItem = new javax.swing.JMenuItem();
        authorsMenuItem = new javax.swing.JMenuItem();

        jLabel1.setText("jLabel1");

        jMenuItem1.setText("jMenuItem1");

        jMenu1.setText("File");
        jMenuBar2.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar2.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(555, 240));
        setResizable(false);

        scrambleButton.setLabel("Scramble \"C\"");
        Action scramble = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                scrambleCube();
            }
        };

        scrambleButton.getInputMap(scrambleButton.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("C"), "scrambleButton");
        scrambleButton.getActionMap().put("scrambleButton", scramble);
        scrambleButton.addActionListener(scramble);

        solveButton.setText("Solve \"S\"");
        solveButton.setAutoscrolls(true);
        solveButton.setMaximumSize(new java.awt.Dimension(93, 23));
        solveButton.setMinimumSize(new java.awt.Dimension(93, 23));
        Action solver = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                solveCube();
            }
        };

        solveButton.getInputMap(solveButton.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("S"), "solveButton");
        solveButton.getActionMap().put("solveButton", solver);
        solveButton.addActionListener(solver);

        jPanel1.setBackground(Color.white);
        jPanel1.setPreferredSize(new java.awt.Dimension(76, 350));

        whiteButton.setBackground(java.awt.Color.white);
        whiteButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        whiteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteButtonActionPerformed(evt);
            }
        });

        orangeButton.setBackground(new java.awt.Color(255, 128, 0));
        orangeButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        orangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orangeButtonActionPerformed(evt);
            }
        });

        blueButton.setBackground(new java.awt.Color(0, 10, 225));
        blueButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        blueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueButtonActionPerformed(evt);
            }
        });

        redButton.setBackground(new java.awt.Color(228, 0, 0));
        redButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        redButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redButtonActionPerformed(evt);
            }
        });

        greenButton.setBackground(new java.awt.Color(0, 153, 76));
        greenButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        greenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenButtonActionPerformed(evt);
            }
        });

        yellowButton.setBackground(new java.awt.Color(255, 255, 10));
        yellowButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        yellowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yellowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(yellowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(greenButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(blueButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(orangeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(whiteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(whiteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(orangeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(blueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(redButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(greenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(yellowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(textArea);

        CubeJPanel.setPreferredSize(new java.awt.Dimension(500, 350));
        CubeJPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CubeJPanelMouseClicked(evt);
            }
        });
        BufferedImage image = null;
        try {
            File imageFile = new File("Resources//cube.png");
            image = ImageIO.read(imageFile);
        } catch (IOException e) {
        }
        this.setIconImage(image);

        javax.swing.GroupLayout CubeJPanelLayout = new javax.swing.GroupLayout(CubeJPanel);
        CubeJPanel.setLayout(CubeJPanelLayout);
        CubeJPanelLayout.setHorizontalGroup(
            CubeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        CubeJPanelLayout.setVerticalGroup(
            CubeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );

        regressButton.setText("<-");
        regressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regressSolveActionPerformed(evt);
            }
        });

        advanceButton.setText("->");
        advanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advanceSolveActionPerformed(evt);
            }
        });

        moveButton.setText("Move");
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 51, 51));
        jButton1.setText("<<-");

        play.setBackground(new java.awt.Color(111, 246, 78));
        play.setText("->>");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        jMenuBar1.setName("CSRubik's"); // NOI18N
        jMenuBar1.setRequestFocusEnabled(false);

        fileMenu.setText("File");

        newCubeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        newCubeMenuItem.setText("New Cube");
        newCubeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCubeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newCubeMenuItem);

        openCubeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openCubeMenuItem.setText("Open Cube");
        openCubeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCubeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openCubeMenuItem);

        saveCubeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveCubeMenuItem.setText("Save Cube");
        saveCubeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCubeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveCubeMenuItem);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        fileMenu.add(exit);

        jMenuBar1.add(fileMenu);

        jMenu3.setText("Options");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Include Face Turns");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu3);

        helpMenu.setText("Help");

        instructionsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        instructionsMenuItem.setText("Instructions");
        instructionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructionsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(instructionsMenuItem);

        authorsMenuItem.setText("Authors");
        authorsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(authorsMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(CubeJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(moveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrambleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(regressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(advanceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(play)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CubeJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrambleButton)
                    .addComponent(regressButton)
                    .addComponent(advanceButton)
                    .addComponent(moveButton)
                    .addComponent(jButton1)
                    .addComponent(play))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // sets the paint cursor to white
    private void whiteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteButtonActionPerformed
        logic.setPaintColor(0);
        jPanel1.setBackground(Color.white);
        repaint();
    }//GEN-LAST:event_whiteButtonActionPerformed
// opens the instructions
    private void instructionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructionsMenuItemActionPerformed
        Instructions openInstructions = new Instructions(this, true);
        openInstructions.setVisible(true);
    }//GEN-LAST:event_instructionsMenuItemActionPerformed

    // exits the application
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed
    // sets the paint cursor to orange
    private void orangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orangeButtonActionPerformed
        logic.setPaintColor(3);
        jPanel1.setBackground(new Color(255, 128, 0));
    }//GEN-LAST:event_orangeButtonActionPerformed
    // sets the paint cursor to blue
    private void blueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueButtonActionPerformed
        logic.setPaintColor(4);
        jPanel1.setBackground(new Color(0, 10, 225));

    }//GEN-LAST:event_blueButtonActionPerformed
    // sets the paint cursor to red
    private void redButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redButtonActionPerformed
        logic.setPaintColor(2);
        jPanel1.setBackground(Color.red);
    }//GEN-LAST:event_redButtonActionPerformed
    // sets the paint cursor to green
    private void greenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenButtonActionPerformed
        logic.setPaintColor(5);
        jPanel1.setBackground(new Color(0, 153, 76));
    }//GEN-LAST:event_greenButtonActionPerformed
    // sets the paint cursor to yellow
    private void yellowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yellowButtonActionPerformed
        logic.setPaintColor(1);
        jPanel1.setBackground(Color.yellow);
    }//GEN-LAST:event_yellowButtonActionPerformed
    // opens the authors frame
    private void authorsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorsMenuItemActionPerformed
        Authors openAuthors = new Authors(this, true);
        openAuthors.setVisible(true);

    }//GEN-LAST:event_authorsMenuItemActionPerformed
    // activates the open cube window, reads the cube, sets logic to it
    private void openCubeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCubeMenuItemActionPerformed
        logic.reset();
        JFileChooser openCube = new JFileChooser();
        clearText();
        text("Select a text file that has appropriate CSRubik's cube notation.");
        openCube.showOpenDialog(exit);
        File cubeFile = openCube.getSelectedFile();
        try {
            String filename = cubeFile.getAbsolutePath();
            if (filename.endsWith(".txt")) {
                text("Opened " + filename);
                logic.setCubeToFile(cubeFile);
                if (logic.checkLegal()) {
                    CubeJPanel.repaint();
                } else {
                    text("Invalid text file");
                }
            } else {
                text("Incorrect file type: not .txt");
            }
        } catch (NullPointerException g) {
        } catch (FileNotFoundException ex) {
        }
    }//GEN-LAST:event_openCubeMenuItemActionPerformed
    // makes a new cube, resets the move queue
    private void newCubeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCubeMenuItemActionPerformed
        logic.reset();
        logic.setCube(new Cube());
        logic.setPaintColor(0);
        jPanel1.setBackground(Color.white);
        CubeJPanel.repaint();
    }//GEN-LAST:event_newCubeMenuItemActionPerformed
    // does the reverse of the previous move in the queue
    private void regressSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regressSolveActionPerformed
        logic.regressMoves();
        CubeJPanel.repaint();
    }//GEN-LAST:event_regressSolveActionPerformed
    // does the next move in the queue
    private void advanceSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advanceSolveActionPerformed
        logic.advanceMoves();
        CubeJPanel.repaint();
    }//GEN-LAST:event_advanceSolveActionPerformed
    // an event ensureing that the JPanel is clickable
    private void CubeJPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CubeJPanelMouseClicked
    }//GEN-LAST:event_CubeJPanelMouseClicked
    // opens the save cube dialogue
    private void saveCubeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCubeMenuItemActionPerformed
        clearText();
        JFileChooser saveFile = new JFileChooser();
        saveFile.showSaveDialog(exit);
        File write = saveFile.getSelectedFile();
        try {
            String filename = write.getAbsolutePath();
            if (filename.endsWith(".txt")) {
                logic.readCube();
                if (logic.checkLegal()) {
                    CubeIO.writeNumbersToFile(write, logic.cube);
                    text("Saved to " + filename);
                } else {
                    text("Invalid cube");
                }
            } else {
                text("Incorrect file type: not .txt");
            }
        } catch (NullPointerException g) {
            text("Save Failed");
        } catch (FileNotFoundException ex) {
            text("Save Failed");
        } catch (IOException ex) {
            text("Save Failed");
        }
    }//GEN-LAST:event_saveCubeMenuItemActionPerformed
    // opens the move interface where moves are selected
    private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtonActionPerformed
        Moves openMoves = new Moves(this, true);
        openMoves.setVisible(true);
    }//GEN-LAST:event_moveButtonActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        for (int moves = 0; moves < logic.numMoves; moves++) {
            logic.advanceMoves();
            CubeJPanel.repaint();
            try {
                Thread.currentThread().sleep(100);
            } catch (InterruptedException e) {
            }
        }
    }//GEN-LAST:event_playActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */         //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrameForm f = new FrameForm();
                f.initComponents();
                f.setVisible(true);

            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel CubeJPanel;
    private javax.swing.JButton advanceButton;
    private javax.swing.JMenuItem authorsMenuItem;
    private javax.swing.JButton blueButton;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton greenButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem instructionsMenuItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton moveButton;
    private javax.swing.JMenuItem newCubeMenuItem;
    private javax.swing.JMenuItem openCubeMenuItem;
    private javax.swing.JButton orangeButton;
    private javax.swing.JButton play;
    private javax.swing.JButton redButton;
    private javax.swing.JButton regressButton;
    private javax.swing.JMenuItem saveCubeMenuItem;
    private javax.swing.JButton scrambleButton;
    private javax.swing.JButton solveButton;
    private javax.swing.JTextArea textArea;
    private javax.swing.JButton whiteButton;
    private javax.swing.JButton yellowButton;
    // End of variables declaration//GEN-END:variables
}