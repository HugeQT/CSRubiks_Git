package CSRubik;

/* Date: Wednesday, June 19, 2013
 * Written by: Henry Han and Quinn Turner
 * Description: This frame carries the instructions on how to use the application as well as 
 * a bit of about information
 */

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

public class Instructions extends javax.swing.JFrame {

    public Instructions(java.awt.Frame parent, boolean modal) {
        super("Instructions");
        this.initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveInstructionsButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        instructionText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        saveInstructionsButton.setText("Save Instructions");
        saveInstructionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveInstructionsButtonActionPerformed(evt);
            }
        });

        instructionText.setColumns(20);
        instructionText.setEditable(false);
        instructionText.setLineWrap(true);
        instructionText.setRows(5);
        instructionText.setText("CSRubik's is a Rubik's Cube solver that uses the Fridrich Method. \n\n\nInput a position:\n\nCSRubik's is flexible in inputting a position.\nYou can use any of three methods, you decide:\n\n1. Color picker\nOn the main frame single click any of the six colors in the panel (red, white, orange, blue, green, yellow) and then click on the respective facelet of the cube. Your chosen color will not be deselected until you select another color. If you fill the cube with an illegal set of colors, an error will be thrown, and adjustments will have to be made accordingly. Once you have completed filling the cube with color, click the Solve button. The move list will be output in the text area.\n\n2. Move cube \nTo use the move cube method, first click the Move button on the main frame. A new window will open up with all 18 moves and all 9 rotations represented as buttons. Clicking the moves or rotations will adjust the cube on the main screen accordingly. If you are not familiar with standard Rubik's Cube notation, refer to the CSRubik's documentation in the Documents folder. You can undo the last move by clicking undo. Enter your own move combination by typing a valid moveset (only using capital U,D,F,B,R,L and x,y,z and 2 and ', all with spaces in between moves) in the text field, then hit the enter key. This will add the moves you created into the text area. Once you are finished with your move list creation, click the Submit button. The move list will be output in the text area. Then click solve to solve the combination. \n\n3. Importing a scramble from a text document is efficient for testing a specific scramble numerous times. Navigate to File->Open Cube. A new window will open up prompting for a text file (.txt). Browse, select, and open your CSRubik's text file. The cube on the frame will automatically update. Finally, click the Solve button. The list of moves will be output in the text area.\n\n\nSave a scramble\n\nNavigate to File->Save Cube. A dialog will open where you can navigate to the location and name the cube you wish to save. Always save as a text (.txt) file. ");
        instructionText.setWrapStyleWord(true);
        setBounds(1228, 95, 320, 365);
        jScrollPane2.setViewportView(instructionText);
        BufferedImage image = null;
        try {
            File imageFile = new File("Resources//cube.png");
            image = ImageIO.read(imageFile);
        } catch (IOException e) {
        }
        this.setIconImage(image);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 363, Short.MAX_VALUE)
                        .addComponent(saveInstructionsButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveInstructionsButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveInstructionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveInstructionsButtonActionPerformed
        try {
            FrameForm text = new FrameForm();
            text.text("CSRubiksInstructions.txt will be located in the same directory as CSRubik's.");
            PrintWriter saveInstructions = new PrintWriter("CSRubiksInstructions.txt");

            saveInstructions.println("CSRubik's is a Rubik's Cube solver that uses the Fridrich Method.");
            saveInstructions.println("");
            saveInstructions.println("Input a position:");
            saveInstructions.println("CSRubik's is flexible in inputting a position. You can use any of three methods, you decide:");
            saveInstructions.println("");
            saveInstructions.println("1. Color picker. To use the color picker method on the main frame single click any of the six colors in the panel");
            saveInstructions.println("(red, white, orange, blue, green, yellow) and then click on the respective facelet of the cube. Your chosen color");
            saveInstructions.println("will not be deselected until you select another color. If you fill the cube with an illegal set of colors, an error");
            saveInstructions.println("will be thrown, and adjustments will have to be made accordingly. Once you have ncompleted filling the cube with");
            saveInstructions.println("color, click the Solve button. The move list will be output in the text area.");
            saveInstructions.println("");
            saveInstructions.println("2. Move cube");
            saveInstructions.println("To use the move cube method, first click the move cube botton. A new window will open up with all 18 moves and all");
            saveInstructions.println("9 rotations represented as buttons. Clicking the moves or rotations will adjust the cube on the main screen accordingly.");
            saveInstructions.println("If you are not familiar with standard Rubik's Cube notation, either refer to the general document attached or click the");
            saveInstructions.println("move button on the bottom of this window. Once you are finished with your move list creation, click the Solve button.");
            saveInstructions.println("The move list will be output in the text area.");
            saveInstructions.println("");
            saveInstructions.println("3. Import from a text document");
            saveInstructions.println("");
            saveInstructions.println("Efficient for testing a specific scramble numerous times, importing a text document is the third method for setting the cube.");
            saveInstructions.println("First, click the Import button on the main screen. A new window will open up prompting for the file (.txt).");
            saveInstructions.println("Browse, select, and open your text file. Finally, click the Solve button. The list of moves will be output in the text area.");
            saveInstructions.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Instructions.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveInstructionsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Instructions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Instructions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Instructions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Instructions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Instructions frame = new Instructions(new javax.swing.JFrame(), true);
                frame.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea instructionText;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton saveInstructionsButton;
    // End of variables declaration//GEN-END:variables
}
